package db

import (
	"context"
	"fmt"
	sq "github.com/Masterminds/squirrel"
	"strings"
	"study.com/demo-sqlx-pgx/api/request"
	"time"
)
{{$businessName := .Business}}
{{$businessNameNote := .BusinessNote}}
{{$businessNamePath := .BusinessPath}}
{{$tableName := .TableName}}
func {{$businessName | toLowerCamel}}CreateSQL(req request.{{$businessName}}CreateRequest, username string) (string, []interface{}, error) {{print "{"}}
	return SQLBuilder().Insert("{{$tableName}}").
		Columns(
		{{- range $index, $element := .Columns}}
		    {{- if eq $index 0}}
		    {{- else if contains $element.ColumnName "update_"}}
		    {{- else if contains $element.ColumnName "status"}}
            {{- else if contains $element.ColumnName "del_flag"}}
		    {{- else if contains $element.ColumnName "create_by"}}
		    "create_by",
		    {{- else if contains $element.ColumnName "create_time"}}
		    "create_time",
		    {{- else}}
		    "{{$element.ColumnName}}",
		    {{- end }}
        {{- end }}).
		Values(
		{{- range $index, $element := .Columns}}
		    {{- if eq $index 0}}
            {{- else if contains $element.ColumnName "update_"}}
            {{- else if contains $element.ColumnName "status"}}
            {{- else if contains $element.ColumnName "del_flag"}}
            {{- else if contains $element.ColumnName "create_by"}}
            username,
            {{- else if contains $element.ColumnName "create_time"}}
            time.Now(),
            {{- else}}
            req.{{$element.ColumnName | toUpperCamel}},
            {{- end }}
        {{- end }}
		    ).
		Suffix("RETURNING \"id\"").
		ToSql()
{{print "}"}}

func (store *SQLStore) {{$businessName}}Create(ctx context.Context, req request.{{$businessName}}CreateRequest, username string) (int64, error) {
	sql, args, err := {{$businessName | toLowerCamel}}CreateSQL(req, username)
	if err != nil {
		return 0, err
	}

	var id int64
	err = store.db.QueryRowxContext(ctx, sql, args...).Scan(&id)

	return id, err
}

func {{$businessName | toLowerCamel}}CreateSQLBatch(reqs []request.{{$businessName}}CreateRequest, username string) (string, []interface{}, error) {
	sql := SQLBuilder().Insert("{{$tableName}}").
		Columns(
		{{- range $index, $element := .Columns}}
            {{- if eq $index 0}}
            {{- else if contains $element.ColumnName "update_"}}
            {{- else if contains $element.ColumnName "status"}}
            {{- else if contains $element.ColumnName "del_flag"}}
            {{- else if contains $element.ColumnName "create_by"}}
            "create_by",
            {{- else if contains $element.ColumnName "create_time"}}
            "create_time",
            {{- else}}
            "{{$element.ColumnName}}",
            {{- end }}
        {{- end }})
	for _, req := range reqs {
		sql = sql.Values(
		{{- range $index, $element := .Columns}}
            {{- if eq $index 0}}
            {{- else if contains $element.ColumnName "update_"}}
            {{- else if contains $element.ColumnName "status"}}
            {{- else if contains $element.ColumnName "del_flag"}}
            {{- else if contains $element.ColumnName "create_by"}}
            username,
            {{- else if contains $element.ColumnName "create_time"}}
            time.Now(),
            {{- else}}
            req.{{$element.ColumnName | toUpperCamel}},
            {{- end }}
        {{- end }}
		)
	}

	return sql.ToSql()
}

func (store *SQLStore) {{$businessName}}CreateBatch(ctx context.Context, req []request.{{$businessName}}CreateRequest, username string) (int64, error) {
	sql, args, err := {{$businessName | toLowerCamel}}CreateSQLBatch(req, username)
	if err != nil {
		return 0, err
	}

	res, err := store.db.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

func {{$businessName | toLowerCamel}}UpdateSQL(req request.{{$businessName}}UpdateRequest, username string) (string, []interface{}, error) {
	sql := SQLBuilder().Update("{{$tableName}}").
        {{- range $index, $element := .Columns}}
            {{- if eq $index 0}}
            {{- else if contains $element.ColumnName "create_"}}
            {{- else if contains $element.ColumnName "update_"}}
            {{- else if contains $element.ColumnName "del_flag"}}
            {{- else}}
            Set("{{$element.ColumnName}}", req.{{$element.ColumnName | toUpperCamel}}).
            {{- end }}
        {{- end }}
            Set("update_by", username).
            Set("update_time", time.Now())
	return sql.Where(sq.Eq{"id": req.Id}).ToSql()
}

func (store *SQLStore) {{$businessName}}Update(ctx context.Context, req request.{{$businessName}}UpdateRequest, username string) (int64, error) {
	sql, args, err := {{$businessName | toLowerCamel}}UpdateSQL(req, username)
	if err != nil {
		return 0, err
	}

	res, err := store.db.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

func (store *SQLStore) {{$businessName}}Delete(ctx context.Context, id int64) (int64, error) {
	var result int64

	sql, args, err := DeleteSQLBuilder("{{$tableName}}", id)
	if err != nil {
		return result, err
	}
	_, err = store.db.ExecContext(ctx, sql, args...)

	return result, err
}

func (store *SQLStore) {{$businessName}}DeleteFake(ctx context.Context, id int64, username string) (int64, error) {
	var result int64

	sql, args, err := DeleteFakeSQLBuilder("{{$tableName}}", id, username)
	if err != nil {
		return result, err
	}
	_, err = store.db.ExecContext(ctx, sql, args...)

	return result, err
}

func (store *SQLStore) {{$businessName}}Detail(ctx context.Context, id int64) ({{.TableName | toUpperCamel}}, error) {
	var result {{.TableName | toUpperCamel}}

	sql, args, err := DetailSQLBuilder("{{$tableName}}", id)
	if err != nil {
		return result, err
	}
	err = store.db.GetContext(ctx, &result, sql, args...)

	return result, err
}

func {{$businessName | toLowerCamel}}PageAndKeywordSQL(req request.PaginationRequest) (querySQL, countSQL string, args []interface{}, err error) {
	sql := baseQuerySQLBuilder("{{$tableName}}").Where(sq.Eq{"status": "0"}).Where(sq.Eq{"del_flag": "N"})
	if req.Keyword != "" && strings.TrimSpace(req.Keyword) != "" {
	    // 根据实际情况填充
		//sql = sql.Where(sq.Or{
		//	sq.Like{"config_name": fmt.Sprint("%", req.Keyword, "%")},
		//})
	}

	// 此处截取COUNT SQL
	countSQL, _, err = sql.ToSql()
	if err != nil {
		return
	}
	countSQL = SQLCount(countSQL)

	//分页
	sql = sql.Offset(req.GetOffset()).Limit(req.GetLimit())

	//排序
	if req.SortField != "" && req.SortOrder != "" {
		sql = sql.OrderBy(req.SortField + " " + req.SortOrder)
	} else {
		sql = sql.OrderBy("create_time DESC")
	}

	querySQL, args, err = sql.ToSql()

	return querySQL, countSQL, args, err
}

func (store *SQLStore) {{$businessName}}Page(ctx context.Context, req request.PaginationRequest) (int64, []{{.TableName | toUpperCamel}}, error) {
	var result []{{.TableName | toUpperCamel}}
	var total int64

	fail := func(err error) (int64, []{{.TableName | toUpperCamel}}, error) {
		return 0, nil, err
	}

	pageSQL, countSQL, args, err := {{$businessName | toLowerCamel}}PageAndKeywordSQL(req)
	if err != nil {
		return fail(err)
	}

	err = store.db.GetContext(ctx, &total, countSQL, args...)
	if err != nil {
		return fail(err)
	}

	err = store.db.SelectContext(ctx, &result, pageSQL, args...)
	if err != nil {
		return fail(err)
	}

	return total, result, nil
}

{{- if eq .ListAll true }}
func (store *SQLStore) {{$businessName}}List(ctx context.Context) ([]{{.TableName | toUpperCamel}}, error) {
	var result []{{.TableName | toUpperCamel}}

	sql, args, err := SQLBuilder().Select("*").From("{{$tableName}}").Where(sq.And{
		sq.Eq{"status": "0"},
		sq.Eq{"del_flag": "N"},
	}).ToSql()
	if err != nil {
		return nil, err
	}

	err = store.db.SelectContext(ctx, &result, sql, args...)

	return result, err
}
{{- end }}

func (store *SQLStore) {{$businessName}}ListByIds(ctx context.Context, ids string) ([]{{.TableName | toUpperCamel}}, error) {
	var result []{{.TableName | toUpperCamel}}

	sql, args, err := SQLBuilder().Select("*").From("{{$tableName}}").
		Where("id = ANY(STRING_TO_ARRAY(?, ',')::int8[])", ids).
		ToSql()
	if err != nil {
		return result, err
	}

	err = store.db.SelectContext(ctx, &result, sql, args...)
	return result, err
}

// {{$businessName}}CountByKey 根据关键字统计条数（根据情况启用）
//func (store *SQLStore) {{$businessName}}CountByKey(ctx context.Context, key string) (int64, error) {
//	sql, args, err := SQLBuilder().Select("count(*)").From("{{$tableName}}").Where(sq.Eq{"{{$businessName}}Key": key}).ToSql()
//	if err != nil {
//		return 0, err
//	}
//	var total int64
//	err = store.db.GetContext(ctx, &total, sql, args...)
//	return total, err
//}