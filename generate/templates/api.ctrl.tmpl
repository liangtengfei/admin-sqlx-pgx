package api

import (
	"github.com/gin-gonic/gin"
	"log"
	"study.com/demo-sqlx-pgx/api/request"
	"study.com/demo-sqlx-pgx/api/response"
	"study.com/demo-sqlx-pgx/service"
)
{{- $businessName := .Biz.Business}}
{{- $businessComment := .Biz.BusinessComment}}
{{- $businessPath := .Biz.Business | toLowerCamel}}
{{- $tableName := .Biz.TableName}}
{{- $tableComment := .Biz.TableComment}}
{{$tableSchema := .Biz.TableName | toUpperCamel}}
// {{$businessName}}Page godoc
// @Summary      {{$businessComment}}分页查询
// @Description  分页获取所有{{$businessComment}}信息
// @Tags         {{$businessComment}}
// @Accept       json
// @Produce      json
// @Success      200       {object}  response.RestRes{data=model.{{$businessName}}Response}
// @Failure      500       {object}  response.RestRes
// @Router       /{{$businessPath}}/p [post]
func {{$businessName}}Page(ctx *gin.Context) {
	var req request.PaginationRequest
	if err := ctx.BindQuery(&req); err != nil {
		response.ErrorValid(ctx, err)
		return
	}

	total, res, err := service.{{$businessName}}Page(ctx, req)
	if err != nil {
		response.ErrorMsg(ctx, err.Error())
		return
	}

	response.SuccessPage(ctx, total, res)
}

// {{$businessName}}Create godoc
// @Summary      {{$businessComment}}新增
// @Description  {{$businessComment}}新增信息
// @Tags         {{$businessComment}}
// @Accept       json
// @Produce      json
// @Param        req  body     request.{{$businessName}}CreateRequest  true  "新增{{$businessComment}}信息"
// @Success      200       {object}  response.RestRes
// @Failure      500       {object}  response.RestRes
// @Router       /{{$businessPath}} [post]
func {{$businessName}}Create(ctx *gin.Context) {
	var req request.{{$businessName}}CreateRequest
	if err := ctx.ShouldBindJSON(&req); err != nil {
		response.ErrorValid(ctx, err)
		return
	}
	err := service.{{$businessName}}Create(ctx, req, GetLoginUserName(ctx))
	if err != nil {
		response.ErrorMsg(ctx, err.Error())
		return
	}
	response.Success(ctx)
}

// {{$businessName}}Update godoc
// @Summary      {{$businessComment}}更新
// @Description  {{$businessComment}}更新信息
// @Tags         {{$businessComment}}
// @Accept       json
// @Produce      json
// @Param        req  body     request.{{$businessName}}UpdateRequest  true  "更新{{$businessComment}}信息"
// @Success      200       {object}  response.RestRes
// @Failure      500       {object}  response.RestRes
// @Router       /{{$businessPath}} [put]
func {{$businessName}}Update(ctx *gin.Context) {
	var req request.{{$businessName}}UpdateRequest
	if err := ctx.ShouldBindJSON(&req); err != nil {
		response.ErrorValid(ctx, err)
		return
	}
	err := service.{{$businessName}}Update(ctx, req, GetLoginUserName(ctx))
	if err != nil {
		response.ErrorMsg(ctx, err.Error())
		return
	}
	response.Success(ctx)
}

// {{$businessName}}Delete godoc
// @Summary      {{$businessComment}}伪删除
// @Description  {{$businessComment}}信息伪删除
// @Tags         {{$businessComment}}
// @Accept       json
// @Produce      json
// @Param        id   path      int  true  "标识"
// @Success      200       {object}  response.RestRes
// @Failure      500       {object}  response.RestRes
// @Router       /{{$businessPath}}/:id [delete]
func {{$businessName}}Delete(ctx *gin.Context) {
	var req request.ByIdRequest
	if err := ctx.ShouldBindUri(&req); err != nil {
		response.ErrorValid(ctx, err)
		return
	}

	err := service.{{$businessName}}DeleteFake(ctx, req.Id, GetLoginUserName(ctx))
	if err != nil {
		response.ErrorMsg(ctx, err.Error())
		return
	}

	response.Success(ctx)
}

// {{$businessName}}Detail godoc
// @Summary      {{$businessComment}}详情
// @Description  {{$businessComment}}详情信息
// @Tags         {{$businessComment}}
// @Accept       json
// @Produce      json
// @Param        id   path      int  true  "标识"
// @Success      200       {object}  response.RestRes{data=model.{{$businessName}}Response}
// @Failure      500       {object}  response.RestRes
// @Router       /{{$businessPath}}/:id [get]
func {{$businessName}}Detail(ctx *gin.Context) {
	var req request.ByIdRequest
	if err := ctx.ShouldBindUri(&req); err != nil {
		response.ErrorValid(ctx, err)
		return
	}
	res, err := service.{{$businessName}}Detail(ctx, req.Id)
	if err != nil {
		response.ErrorMsg(ctx, err.Error())
		return
	}
	response.SuccessData(ctx, res)
}